{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import styles from\"../css/Card.module.css\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";const Card=props=>{const[isLoggedIn,setIsLoggedIn]=useState(true);useEffect(()=>{const interval=setInterval(()=>{checkTokenValidity();},5000);// 5분마다 토큰 유효성 검사\nreturn()=>clearInterval(interval);},[]);const checkTokenValidity=async()=>{try{const response=await axios.get(\"/verify-token\",{headers:{Authorization:\"Bearer \".concat(localStorage.getItem(\"token\"))}});console.log(response.data.message);// \"Token is valid\"\nsetIsLoggedIn(true);}catch(error){console.error(\"Token validation error\",error.response);setIsLoggedIn(false);localStorage.removeItem(\"token\");// 로그인 상태가 유효하지 않으면 토큰 제거\n}};return/*#__PURE__*/_jsx(\"div\",{className:styles.card+\" \"+isLoggedIn?\"\".concat(styles.nonBlurred):\"\".concat(styles.nonBlurred),children:props.children});};export default Card;","map":{"version":3,"names":["React","useEffect","useState","styles","axios","jsx","_jsx","Card","props","isLoggedIn","setIsLoggedIn","interval","setInterval","checkTokenValidity","clearInterval","response","get","headers","Authorization","concat","localStorage","getItem","console","log","data","message","error","removeItem","className","card","nonBlurred","children"],"sources":["/Users/tjwns3481/Desktop/workspace/autoSourcing/client/src/components/Card.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"../css/Card.module.css\";\nimport axios from \"axios\";\n\nconst Card = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(true);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      checkTokenValidity();\n    }, 5000); // 5분마다 토큰 유효성 검사\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const checkTokenValidity = async () => {\n    try {\n      const response = await axios.get(\"/verify-token\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      console.log(response.data.message); // \"Token is valid\"\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error(\"Token validation error\", error.response);\n      setIsLoggedIn(false);\n      localStorage.removeItem(\"token\"); // 로그인 상태가 유효하지 않으면 토큰 제거\n    }\n  };\n  return (\n    <div\n      className={\n        styles.card + \" \" + isLoggedIn\n          ? `${styles.nonBlurred}`\n          : `${styles.nonBlurred}`\n      }\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,MAAM,KAAM,wBAAwB,CAC3C,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1B,KAAM,CAAAC,IAAI,CAAIC,KAAK,EAAK,CACtB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAElDD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAU,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjCC,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAAE,IAAI,CAAC,CAAE;AAEV,MAAO,IAAMC,aAAa,CAACH,QAAQ,CAAC,CACtC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAX,KAAK,CAACY,GAAG,CAAC,eAAe,CAAE,CAChDC,OAAO,CAAE,CACPC,aAAa,WAAAC,MAAA,CAAYC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACxD,CACF,CAAC,CAAC,CACFC,OAAO,CAACC,GAAG,CAACR,QAAQ,CAACS,IAAI,CAACC,OAAO,CAAC,CAAE;AACpCf,aAAa,CAAC,IAAI,CAAC,CACrB,CAAE,MAAOgB,KAAK,CAAE,CACdJ,OAAO,CAACI,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAACX,QAAQ,CAAC,CACvDL,aAAa,CAAC,KAAK,CAAC,CACpBU,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC,CAAE;AACpC,CACF,CAAC,CACD,mBACErB,IAAA,QACEsB,SAAS,CACPzB,MAAM,CAAC0B,IAAI,CAAG,GAAG,CAAGpB,UAAU,IAAAU,MAAA,CACvBhB,MAAM,CAAC2B,UAAU,KAAAX,MAAA,CACjBhB,MAAM,CAAC2B,UAAU,CACzB,CAAAC,QAAA,CAEAvB,KAAK,CAACuB,QAAQ,CACZ,CAAC,CAEV,CAAC,CAED,cAAe,CAAAxB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}