{"ast":null,"code":"var _jsxFileName = \"/Users/tjwns3481/Desktop/workspace/autoSourcing/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      verifyToken(token);\n    }\n  }, []);\n  const verifyToken = async token => {\n    try {\n      await axios.get(\"/verify-token\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setIsLoggedIn(true); // 토큰이 유효하면 로그인 상태로 설정\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`; // 모든 요청에 토큰 설정\n    } catch (error) {\n      console.error(\"Token verification failed:\", error);\n      localStorage.removeItem(\"token\"); // 토큰이 유효하지 않으면 제거\n      setIsLoggedIn(false);\n    }\n  };\n  const login = token => {\n    localStorage.setItem(\"token\", token);\n    setIsLoggedIn(true);\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setIsLoggedIn(false);\n    delete axios.defaults.headers.common[\"Authorization\"];\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","token","localStorage","getItem","verifyToken","get","headers","Authorization","defaults","common","error","console","removeItem","login","setItem","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/tjwns3481/Desktop/workspace/autoSourcing/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      verifyToken(token);\n    }\n  }, []);\n\n  const verifyToken = async (token) => {\n    try {\n      await axios.get(\"/verify-token\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setIsLoggedIn(true); // 토큰이 유효하면 로그인 상태로 설정\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`; // 모든 요청에 토큰 설정\n    } catch (error) {\n      console.error(\"Token verification failed:\", error);\n      localStorage.removeItem(\"token\"); // 토큰이 유효하지 않으면 제거\n      setIsLoggedIn(false);\n    }\n  };\n\n  const login = (token) => {\n    localStorage.setItem(\"token\", token);\n    setIsLoggedIn(true);\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setIsLoggedIn(false);\n    delete axios.defaults.headers.common[\"Authorization\"];\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTG,WAAW,CAACH,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,WAAW,GAAG,MAAOH,KAAK,IAAK;IACnC,IAAI;MACF,MAAMT,KAAK,CAACa,GAAG,CAAC,eAAe,EAAE;QAC/BC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASN,KAAM;QACjC;MACF,CAAC,CAAC;MACFD,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACrBR,KAAK,CAACgB,QAAQ,CAACF,OAAO,CAACG,MAAM,CAAC,eAAe,CAAC,GAAI,UAASR,KAAM,EAAC,CAAC,CAAC;IACtE,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDR,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;MAClCZ,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAMa,KAAK,GAAIZ,KAAK,IAAK;IACvBC,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEb,KAAK,CAAC;IACpCD,aAAa,CAAC,IAAI,CAAC;IACnBR,KAAK,CAACgB,QAAQ,CAACF,OAAO,CAACG,MAAM,CAAC,eAAe,CAAC,GAAI,UAASR,KAAM,EAAC;EACpE,CAAC;EAED,MAAMc,MAAM,GAAGA,CAAA,KAAM;IACnBb,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCZ,aAAa,CAAC,KAAK,CAAC;IACpB,OAAOR,KAAK,CAACgB,QAAQ,CAACF,OAAO,CAACG,MAAM,CAAC,eAAe,CAAC;EACvD,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,UAAU;MAAEc,KAAK;MAAEE;IAAO,CAAE;IAAAlB,QAAA,EACxDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,EAAA,CA3CWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AA6CzB,OAAO,MAAM2B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnC,UAAU,CAACM,WAAW,CAAC;AAAA;AAAC6B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}