{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import styles from\"../css/Card.module.css\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";const Card=props=>{const[isLoggedIn,setIsLoggedIn]=useState(true);useEffect(()=>{const interval=setInterval(()=>{checkTokenValidity();console.log(isLoggedIn);},5000);// 5분마다 토큰 유효성 검사\nreturn()=>clearInterval(interval);},[]);const checkTokenValidity=async()=>{try{const response=await axios.get(\"/verify-token\",{headers:{Authorization:\"Bearer \".concat(localStorage.getItem(\"token\"))}});console.log(response.data.message);// \"Token is valid\"\nsetIsLoggedIn(true);}catch(error){console.error(\"Token validation error\",error.response);setIsLoggedIn(false);localStorage.removeItem(\"token\");// 로그인 상태가 유효하지 않으면 토큰 제거\n}};return/*#__PURE__*/_jsx(\"div\",{className:\"\\n        \".concat(styles.card,\" \").concat(isLoggedIn?styles.nonBlurred:styles.Blurred,\"\\n      \"),children:props.children});};export default Card;","map":{"version":3,"names":["React","useEffect","useState","styles","axios","jsx","_jsx","Card","props","isLoggedIn","setIsLoggedIn","interval","setInterval","checkTokenValidity","console","log","clearInterval","response","get","headers","Authorization","concat","localStorage","getItem","data","message","error","removeItem","className","card","nonBlurred","Blurred","children"],"sources":["/Users/tjwns3481/Desktop/workspace/autoSourcing/client/src/components/Card.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"../css/Card.module.css\";\nimport axios from \"axios\";\n\nconst Card = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(true);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      checkTokenValidity();\n      console.log(isLoggedIn);\n    }, 5000); // 5분마다 토큰 유효성 검사\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const checkTokenValidity = async () => {\n    try {\n      const response = await axios.get(\"/verify-token\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      console.log(response.data.message); // \"Token is valid\"\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error(\"Token validation error\", error.response);\n      setIsLoggedIn(false);\n      localStorage.removeItem(\"token\"); // 로그인 상태가 유효하지 않으면 토큰 제거\n    }\n  };\n\n  return (\n    <div\n      className={`\n        ${styles.card} ${isLoggedIn ? styles.nonBlurred : styles.Blurred}\n      `}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,MAAM,KAAM,wBAAwB,CAC3C,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1B,KAAM,CAAAC,IAAI,CAAIC,KAAK,EAAK,CACtB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAElDD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAU,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjCC,kBAAkB,CAAC,CAAC,CACpBC,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC,CACzB,CAAC,CAAE,IAAI,CAAC,CAAE;AAEV,MAAO,IAAMO,aAAa,CAACL,QAAQ,CAAC,CACtC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAb,KAAK,CAACc,GAAG,CAAC,eAAe,CAAE,CAChDC,OAAO,CAAE,CACPC,aAAa,WAAAC,MAAA,CAAYC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACxD,CACF,CAAC,CAAC,CACFT,OAAO,CAACC,GAAG,CAACE,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAE;AACpCf,aAAa,CAAC,IAAI,CAAC,CACrB,CAAE,MAAOgB,KAAK,CAAE,CACdZ,OAAO,CAACY,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAACT,QAAQ,CAAC,CACvDP,aAAa,CAAC,KAAK,CAAC,CACpBY,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC,CAAE;AACpC,CACF,CAAC,CAED,mBACErB,IAAA,QACEsB,SAAS,cAAAP,MAAA,CACLlB,MAAM,CAAC0B,IAAI,MAAAR,MAAA,CAAIZ,UAAU,CAAGN,MAAM,CAAC2B,UAAU,CAAG3B,MAAM,CAAC4B,OAAO,YAChE,CAAAC,QAAA,CAEDxB,KAAK,CAACwB,QAAQ,CACZ,CAAC,CAEV,CAAC,CAED,cAAe,CAAAzB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}